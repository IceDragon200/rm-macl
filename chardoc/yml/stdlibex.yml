Object:
  type: class
  des: "Parent class for every Object"
  source: Object_Ex.rb
  consts: 
  iattrs:
  cfuncs:
  ifuncs:
    to_bool:
      -
        params: 
        return: Boolean
        des: "Convert self to a Boolean using !!" 
    deep_clone:
      -
        params: 
        return: Object
        des: "Makes a full clone of self using Marshal"
    if_eql?:
      -
        params: 
          - obj: Object
          - swap: Object
        return: Object
        des: "Compares self with obj, if evaluated to true, then swap is return"
      -
        params: 
          - obj: Object
        block: swap  
        return: Object
        des: "Compares self with obj, if evaluated to true, then the block is executed and return the result"      
    if_neql?:
      -
        params: 
          - obj: Object
          - swap: Object
        return: Object
        des: "Compares self with obj, if evaluated to false, then return swap"
      -
        params: 
          - obj: Object
        block: swap  
        return: Object
        des: "Compares self with obj, if evaluated to false, then the block is executed and return the result"      
    if_nil?:
      -
        params: 
          - swap: Object
        return: Object
        des: "Calls #nil? on self, if evaluated to true, then return swap"
      -
        params: 
        block: swap  
        return: Object
        des: "Calls #nil? on self, if evaluated to true, then the block is executed and return the result" 
Module:
  type: class
  des: ""
  source: Module_Ex.rb
  consts: 
  iattrs:
  cfuncs:
  ifuncs:
    memoize:
      - 
        params: 
          - "*syms": "Symbol[]"
        return: Boolean
        des: "alias the method from sym as pre_memoize_*, when the method is called its value is stored in @memoized_*, if the variable is already set, then its value is return"
    memoize_as:
      - 
        params: 
          - hash: "Hash[Symbol, Object]"
        return: Boolean
        des: "Iterates using each_pair, define_method from Symbol, that will return the value from the key pair"
Numeric:
  type: class
  source: Numeric_Ex.rb
  consts: 
    ROMAN: 
      type: "Hash[Integer, String]"
      des: Contains strings for converting to Roman Numerals 
  iattrs:
  cfuncs:
  ifuncs:
    count:
      - 
        params: 
          - n: Integer
        block: "|n| do_with_n"
        return: Integer
        des: "Add n to self each iteration, and executes the block with the value as the arg. Terminate the block using break, the value return is the last one produced"
    positive?:
      - 
        return: Boolean
        des: "return true if self is greater than 0, return false otherwise"
    negative?:
      - 
        return: Boolean
        des: "return true if self is less than 0, return false otherwise"
    to_roman:
      - 
        return: "String"
        des: "Converts self to Roman Numeral String"
    unary:
      - 
        return: "Integer(-1, 0, 1)"
        des: "Compares self using <=>"
    unary_inv:
      - 
        return: "Integer(-1, 0, 1)"
        des: "Compares self using <=> and return the inverse of the result"
    clamp:
      - 
        params: 
          - min: Numeric 
          - max: Numeric 
        return: Numeric
        des: "if self is greater than max, return max, if self is less than min, return min, else return self"    
    max:
      - 
        params: 
          - n: Numeric 
        return: Numeric
        des: "return the larger value of self and n"
    min:
      - 
        params: 
          - n: Numeric 
        return: Numeric
        des: "return the smaller value of self and n"
String:
  type: class
  source: String_Ex.rb
  consts: 
  iattrs:
  cfuncs:
  ifuncs:
    as_bool:
      - 
        return: Boolean
        des: "Reads self as a word, converts to a Boolean based of word, require MACL::Parsers"
    indent:
      - 
        params: 
          - n: Integer
          - spacer: String
        return: String
        des: "refer to #indent!"
    indent!:
      - 
        params: 
          - n: Integer
      - 
        params: 
          - n: Integer
          - spacer: String
        return: String
        des: "Places the spacer n times in front of the string, default spacer is 1 whitespace"
    word_wrap:
      -
      - 
        params: 
          - line_width: Integer
        return: String
        des: "refer to #word_wrap!"
    word_wrap!:   
      -    
      - 
        params: 
          - line_width: Integer
        return: String
        des: "Splits the string by words, and rewraps them to fit into a line_width column, new lines will be automatically created to hold the words, line_width is 80 by default"
    character_wrap:
      - 
        params: 
          - characters: Integer
        return: String
        des: "" 
Array:
  type: class
  source: Array_Ex.rb
  consts: 
  iattrs:
  cfuncs:
  ifuncs:
    offset:
      -
        params:
          - obj: Object
      -
        params:
          - obj: Object
          - reverse: Boolean
        return: self
        des: "Adds the obj to the end of self, pull and return the first element, if reverse, adds the element to the start of self, pull and return the last element"
    pick!:    
      -
        return: Object
        des: "Randomly chooses an element in self, deletes and return, require Enumerable_Ex"
    pad:
      - 
        params:
          - newsize: Integer    
      - 
        params:    
          - newsize: Integer   
        block: obj  
      - 
        params:    
          - newsize: Integer   
          - obj: Object  
        return: Array  
        des: "refer to #pad!"
    pad!:    
      - 
        params:
          - newsize: Integer    
      - 
        params:    
          - newsize: Integer   
        block: obj  
      - 
        params:    
          - newsize: Integer   
          - obj: Object  
        return: self  
        des: "Resizes self to newsize, if the size is less than newsize then obj is pushed until the size is equal to newsize, else if the size is greater than newsize, objects are popped from self until the size is equal, by default obj is nil"
    uniq_arrays:    
      -
        params:
          - groups: "Array[Array]"
        return: "Array[Array]"
        des: "refer to uniq_arrays!"
    uniq_arrays!:    
      -
        params:
          - groups: "Array[Array]"
        return: self 
        des: "Creates uniq arrays from groups, the result are arrays that have uniq elements, no other array in the result will have the same elements"
    rotate:
      -
      - 
        params:
          - n: Integer
        return: Array  
        des: "refer to rotate!"      
    rotate!:
      -
      - 
        params:
          - n: Integer
        return: self  
        des: "offsets the array by n, wrapping it around, by default n is 1"          
    remove_n:    
      -
        params:
          - obj: Object
      -
        params:
          - obj: Object
          - n: Integer 
        return: self
        des: "Removes obj from self n times, by default n is 1"    
Hash:
  type: class
  source: Hash_Ex.rb
  consts: 
  iattrs:
  cfuncs:
  ifuncs:
    replace_key:
      - 
        params: 
          - hash: Hash
      - 
        block: "|key| new_key"
        return: Hash
        des: "refer to #replace_key!"  
    replace_key!:
      - 
        params: 
          - hash: Hash
      - 
        block: "|key| new_key"
        return: self  
        des: "Replace all matching keys in self from <c:arg>hash</c>"
    remap:
      - 
        block: "|key, value| [new_key, new_value]"
        return: self  
        des: "refer to #remap!"
        
    remap!:
      - 
        block: "|key, value| [new_key, new_value]"
        return: self  
        des: "Replace all <c:arg>keys</c> and <c:arg>values</c> in self"
    get_values:
      - 
        params:
          - keys: "Array[Object]"
        return: "Array[Object]"
        des: "return an Array of values from keys"   
    enum2keys:
      -
        return: Hash
        des: "refer to #enum2keys!" 
    enum2keys!:
      -
        return: self
        des: "flattens all Enumerable keys to single keys in self" 
MatchData:
  type: class
  source: MatchData_Ex.rb
  consts: 
  iattrs:
  cfuncs:
  ifuncs:
    to_hash:
      - 
        return: Hash[Symbol, String]
        des: "Converts self to Hash"
Kernel:
  type: module
  source: Kernel_Ex.rb
  consts: 
  iattrs:
  cfuncs:
  ifuncs:
    Boolean:
      -
        params:
          - obj: Object
        return: Boolean
        des: "Converts the object to a Boolean using !!" 
    load_data:
      -
        params:
          - filename: String
        return: Object
        des: "Marshal #load an Object from a file (filename) in binary mode"
    load_data_cin:
      -
        params:
          - filename: String
        block: Object  
        return: Object        
        des: "cin: Create If nil, file (filename) will be created if it doesn't exist, uses save_data and load_data respectively"
    save_data:
      - 
        params:
          - obj: Object
          - filename: String
        return: self
        des: "Marshal #dump an object to file (filename) in binary mode"
    #skinj_eval:
Enumerable:
  type: module
  source: Enumerable_Ex.rb
  consts: 
  iattrs:
  cfuncs:
  ifuncs:
    pick:
      -
        return: Object
        des: "Randomly selects element in self"
    reverse_index:
      -
        params:
          - obj: Object
      -
        block: "|n| Boolean"
        return: Integer
        des: "Similar to index, but starts from the end of the array and iterates to the beginning, will return the index of a given obj, if a block is given, when it evaluates to true the index will return, if the obj cannot be found, nil will return"    

# Footer